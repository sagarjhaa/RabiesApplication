@model RabiesApplication.Web.ViewModels.VetFormViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm("Save","Vets")) 
{
    @Html.AntiForgeryToken()
    
    
        <h4>Veterinarian</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
      
        <div class="row ">
            <div class="col">

                @Html.LabelFor(model => model.FirstName,"Name", htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col">
                @*@Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>*@
            </div>
        </div>

        <div class="row ">
            <div class="col">

                @Html.LabelFor(model => model.Addressline1, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Addressline1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Addressline1, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="col">

                @Html.LabelFor(model => model.Addressline2, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Addressline2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Addressline2, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>

        <div class="row ">
            <div class="col">

                @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownListFor(model => model.StateId, new SelectList(Model.States, "Id", "StateName"), htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="col">

                @Html.LabelFor(model => model.CountyId, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownListFor(model => model.CountyId, new SelectList(Model.Counties, "Id", "Name"), htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CountyId, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>

        <div class="row ">
            <div class="col">

                @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownListFor(model => model.CityId, new SelectList(Model.Cities, "Id", "CityName"), htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="col">

                @Html.LabelFor(model => model.Zipcode, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Zipcode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Zipcode, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>

        <div class="row ">
            <div class="col">

                @Html.LabelFor(model => model.Contactnumber1, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Contactnumber1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Contactnumber1, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="col">

                @Html.LabelFor(model => model.Contactnumber2, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Contactnumber2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Contactnumber2, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>


        <div class="row">
            <div class="col">
                @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.TextAreaFor(model => model.Comments, htmlAttributes: new { @class = "form-control", rows = 5 })
                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    
    <br/>

    <div class="row">
        
        <div class="col-4">
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Active)
            @Html.HiddenFor(model => model.EmployeeCreated)
            @Html.HiddenFor(model => model.RecordCreated)
            <input type="submit" value="Save" class="btn btn-success btn-block" />
        </div>
        <div class="col-2">
            @Html.ActionLink("Back to List", "Index", null, htmlAttributes: new { @class = "btn btn-outline-primary" })
        </div>
    </div>

}


<script>

    $(document)
        .ready(function() {

            $("[id~='StateId']").change(function () {
                var state = this;
                var statevalue = this.options[this.selectedIndex].value;

                GetCounties(statevalue);
                GetCities(statevalue);

            });

        });

    function GetCounties(statevalue) {
        $.ajax({
            url: '/Bites/GetCountiesByStateId',
            data: { 'stateId': statevalue },
            success: function (result) {
                SetCounties(result);
            }
        });
    }


    function SetCounties(result) {
        var countySelect = $("[id~='CountyId']");
        countySelect.find('option').remove().end();

        for (i = 0; i < result.length; i++) {

            var string = '<option value="' + result[i].Id + '">' + result[i].Name + '</option>';
            countySelect.append(string);
        }
    }

    function GetCities(statevalue) {
        $.ajax({
            url: '/Bites/GetCitiesByStateId',
            data: { 'stateId': statevalue },
            success: function (result) {
                SetCities(result);
            }
        });
    }

    function SetCities(result) {
        var citySelect = $("[id~='CityId']");
        citySelect.find('option').remove().end();

        //citySelect.append('<option value="">Select City</option>');

        for (i = 0; i < result.length; i++) {

            var string = '<option value="' + result[i].Id + '">' + result[i].CityName + '</option>';
            citySelect.append(string);
        }
    }


</script>
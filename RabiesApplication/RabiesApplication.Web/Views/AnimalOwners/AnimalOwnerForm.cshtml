@model RabiesApplication.Web.ViewModels.AnimalOwnerFormViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Save", "AnimalOwners"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>AnimalOwner</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.Id)

        <div class="row ">
            <div class="col">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col">

                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>


        <div class="row ">
            <div class="col">

                @Html.LabelFor(model => model.Dateofbirth, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Dateofbirth, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Dateofbirth, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="col">

                @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>


        <div class="row ">
            <div class="col">
                @Html.LabelFor(model => model.Addressline1, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Addressline1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Addressline1, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col">
                @Html.LabelFor(model => model.Addressline2, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.EditorFor(model => model.Addressline2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Addressline2, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="row ">
            <div class="col">
                @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownListFor(model => model.StateId, new SelectList(Model.States, "Id", "StateName"), htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col">
                @Html.LabelFor(model => model.CountyId, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownListFor(model => model.CountyId, new SelectList(Model.Counties, "Id", "Name"), htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CountyId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>



        <div class="row ">
            <div class="col">
                @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownListFor(model => model.CityId, new SelectList(Model.Cities, "Id", "CityName"), htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    @Html.LabelFor(model => model.Zipcode, htmlAttributes: new { @class = "control-label col" })
                    <div class="col">
                        @Html.EditorFor(model => model.Zipcode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Zipcode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row ">
            <div class="col">
                <div class="form-group">
                    @Html.LabelFor(model => model.Contactnumber1, htmlAttributes: new { @class = "control-label col" })
                    <div class="col">
                        @Html.EditorFor(model => model.Contactnumber1, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Contactnumber1, "", new { @class = "text-danger" })
                    </div>
                </div>


            </div>
            <div class="col">
                <div class="form-group">
                    @Html.LabelFor(model => model.Contactnumber2, htmlAttributes: new { @class = "control-label col" })
                    <div class="col">
                        @Html.EditorFor(model => model.Contactnumber2, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Contactnumber2, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row ">
            <div class="col">
                @Html.LabelFor(model => model.IsShelter, htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsShelter)
                        @Html.ValidationMessageFor(model => model.IsShelter, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <div class="col">
                        <input type="submit" value="Save" class="btn btn-success col-3"/>
                        @Html.ActionLink("List of Owners", "AnimalOwners", "AnimalOwners", null, htmlAttributes: new { @class = "btn btn-outline-warning" })
                        @Html.ActionLink("List of Bites", "Index", "Bites", null, htmlAttributes: new { @class = "btn btn-outline-primary" })

                        @if (ViewBag.BiteId != null)
                        {
                            @Html.ActionLink("Bite Details", "Details", "Bites", new { biteId = @ViewBag.BiteId }, htmlAttributes: new { @class = "btn btn-outline-primary" })
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
}

<hr/>
<h4>Owner's Animals</h4>
<table class="table table-bordered table-condensed table-hover table-striped">
    <tr>
        <td>Animal Name</td>
        <td>Breed</td>
        <td>Species</td>
        <td>BiteCount</td>
    </tr>
    @if (Model.AnimalList != null)
    {


        foreach (var item in Model.AnimalList)
         {
             <tr>
                 <td>@item.Name</td>
                 <td>@item.Breed</td>
                 <td>@item.Species</td>
                 <td>@item.BiteCount</td>
             </tr>
         }
    }
</table>




<script>

    $(document).ready(function () {

            $("[id~='StateId']").change(function () {
                var state = this;
                var statevalue = this.options[this.selectedIndex].value;

                GetCounties(statevalue);
                GetCities(statevalue);

            });

        });

    function GetCounties(statevalue) {
        $.ajax({
            url: '/Bites/GetCountiesByStateId',
            data: { 'stateId': statevalue },
            success: function (result) {
                SetCounties(result);
            }
        });
    }

    function SetCounties(result) {
        var countySelect = $("[id~='CountyId']");
        countySelect.find('option').remove().end();

        for (i = 0; i < result.length; i++) {

            var string = '<option value="' + result[i].Id + '">' + result[i].Name + '</option>';
            countySelect.append(string);
        }
    }

    function GetCities(statevalue) {
        $.ajax({
            url: '/Bites/GetCitiesByStateId',
            data: { 'stateId': statevalue },
            success: function (result) {
                SetCities(result);
            }
        });
    }

    function SetCities(result) {
        var citySelect = $("[id~='CityId']");
        citySelect.find('option').remove().end();

        //citySelect.append('<option value="">Select City</option>');

        for (i = 0; i < result.length; i++) {

            var string = '<option value="' + result[i].Id + '">' + result[i].CityName + '</option>';
            citySelect.append(string);
        }
    }


    function AnimalList() {
        this.Name = ko.observable();
        this.species = ko.observable();
        this.breed = ko.observable();
        this.Bites = ko.obserable();
    }

    ko.applyBindings(new AnimalList());


</script>